generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  
  accounts      Account[]
  sessions      Session[]
  attendee      Attendee[]
  tournament    Tournament[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Attendee {
  id        Int       @id @default(autoincrement())
  userId    String
  firstname String    @db.VarChar(20)
  lastname  String    @db.VarChar(30)
  rating    Int?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now()) @db.DateTime(0)
  updatedAt DateTime? @db.DateTime(0)
  
  user      User      @relation(fields: [userId], references: [id], onUpdate: Cascade)
  tournamentAttendees TournamentAttendees[]

  @@unique([userId, firstname, lastname])
}

model Tournament {
  id        Int      @id @default(autoincrement())
  userId    String
  name      String   @db.VarChar(45)
  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt String?  @db.VarChar(45)
  
  tournamentAttendees TournamentAttendees[]
  user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade)

  @@unique([userId, name])
}

model TournamentAttendees {
  id           Int        @id @default(autoincrement())
  tournamentId Int
  attendeeId   Int

  Attendee     Attendee   @relation(fields: [attendeeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "attendee_id_fkey")
  Tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tournament_id_fkey")

  @@index([attendeeId], map: "attendee_id_fkey_idx")
  @@index([tournamentId], map: "tournament_id_fkey")
}

